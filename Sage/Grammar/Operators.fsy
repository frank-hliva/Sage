%%/*** OPERATORS ***/

op:
| op0 { $1 }

op0:
| op0 OP_SPECIAL_ASSIGN logicalOp1 { BinaryOperator("~=", $1, $3) }
| logicalOp1 { $1 }

/* LOGICAL */
logicalOp1:
| logicalOp1 OP_XOR logicalOp2 { BinaryOperator("xor", $1, $3) }
| logicalOp2 { $1 }

logicalOp2:
| logicalOp2 OP_OR logicalOp3 { BinaryOperator("or", $1, $3) }
| logicalOp3 { $1 }

logicalOp3:
| logicalOp3 OP_AND bitwiseOp1 { BinaryOperator("and", $1, $3) }
| bitwiseOp1 { $1 }

/* BITWISE (1) */
bitwiseOp1:
| bitwiseOp1 OP_BITWISE_XOR bitwiseOp2 { BinaryOperator("bw_xor", $1, $3) }
| bitwiseOp2 { $1 }

bitwiseOp2:
| bitwiseOp2 OP_BITWISE_OR bitwiseOp3 { BinaryOperator("bw_or", $1, $3) }
| bitwiseOp3 { $1 }

bitwiseOp3:
| bitwiseOp3 OP_BITWISE_AND bitwiseOp4 { BinaryOperator("bw_and", $1, $3) }
| bitwiseOp4 { $1 }

bitwiseOp4:
| bitwiseOp4 OP_BITWISE_NOT op4 { BinaryOperator("bw_not", $1, $3) }
| op4 { $1 }

op4:
| op4 OP_LESS_THAN bitwise_bit_shift { BinaryOperator("<", $1, $3) }
| op4 OP_LESS_THAN_OR_EQUALS bitwise_bit_shift { BinaryOperator("<=", $1, $3) }
| op4 OP_GREATER_THAN bitwise_bit_shift { BinaryOperator(">", $1, $3) }
| op4 OP_GREATER_THAN_OR_EQUALS bitwise_bit_shift { BinaryOperator(">=", $1, $3) }
| op4 OP_NOT_EQUALS bitwise_bit_shift { BinaryOperator("<>", $1, $3) }
| op4 OP_EQUALS_OR_ASSIGN bitwise_bit_shift { BinaryOperator("=", $1, $3) }
| op4 OP_EQUALS bitwise_bit_shift { BinaryOperator("=", $1, $3) }
| bitwise_bit_shift { $1 }

/* BITWISE (2) */
bitwise_bit_shift:
| bitwise_bit_shift OP_BITWISE_ZERO_FILL_LEFT_SHIFT op5 { BinaryOperator("<<:", $1, $3) }
| bitwise_bit_shift OP_BITWISE_SIGNED_RIGHT_SHIFT op5 { BinaryOperator(":>>", $1, $3) }
| bitwise_bit_shift OP_BITWISE_ZERO_FILL_RIGHT_SHIFT op5 { BinaryOperator(":>>>", $1, $3) }
| op5 { $1 }

op5:
| op5 OP_APPEND op6 { BinaryOperator("%%", $1, $3) }
| op6 { $1 }

op6:
| op6 OP_ADDITION op7 { BinaryOperator("+", $1, $3) }
| op6 OP_SUBTRACT op7 { BinaryOperator("-", $1, $3) }
| op7 { $1 }

op7:
| op7 OP_MULTIPLY op8 { BinaryOperator("*", $1, $3) }
| op7 OP_DIVIDE op8 { BinaryOperator("/", $1, $3) } 
| op7 OP_MODULO op8 { BinaryOperator("%", $1, $3) } 
| op8 { $1 }

opNegate:
| OP_NEGATE op9 { UnaryOperator("-", $2) }

op8:
| OP_NOT op9 { UnaryOperator("!", $2) }
| opNegate { $1 }
| OP_SUCCESSOR op9 { UnaryOperator("succ", $2) }
| OP_PREDECESSOR op9 { UnaryOperator("pred", $2) }
| op9 { $1 }

op9:
| op9 OP_POWER exprMain { BinaryOperator("**", $1, $3) }
| exprMain { $1 }

